snippet comm
	(comment
<<<<<<< HEAD
	  ${0})

snippet condp
	(condp ${1:pred} ${2:expr}
	  ${0})

=======
		${0})
snippet condp
	(condp ${1:pred} ${2:expr}
		${0})
>>>>>>> e0b29dd5536deaa586ffcb452bf6f1efad81d723
snippet def
	(def ${0})
snippet defm
	(defmethod ${1:multifn} "${2:doc-string}" ${3:dispatch-val} [${4:args}]
		${0})
snippet defmm
	(defmulti ${1:name} "${2:doc-string}" ${0:dispatch-fn})
snippet defma
	(defmacro ${1:name} "${2:doc-string}" ${0:dispatch-fn})
snippet defn
	(defn ${1:name} 
	"${2}" 
	[${3:arg-list}]
	  ${0})

snippet mapfn
	(map (fn [${1}]
	       ${2})
	      ${0:applied-to})

snippet did-mount
	(did-mount [_]
	           ${0})

snippet will-mount
	(will-mount [_]
	            ${0})

snippet did-update
	(did-update [this prev-props prev-state]
	            ${0})


snippet will-update
	(will-update [this next-props next-state]
	             ${0})

snippet defcomponent
	(defcomponent ${1:name} [${2:cursor} owner opts]
	  (render [_]
	          ${0}))


snippet defcompstate
	(defcomponent ${1:name} [${2:cursor} owner opts]
	  (render-state [_ state]
	                ${0}))

snippet defp
	(defprotocol ${1:name}
		${0})
snippet defr
	(defrecord ${1:name} [${2:fields}]
		${3:protocol}
		${0})
snippet deft
	(deftest ${1:name}
		(is (= ${0:assertion})))
snippet is
	(is (= ${1} ${0}))
snippet defty
	(deftype ${1:Name} [${2:fields}]
		${3:Protocol}
		${0})
snippet doseq
	(doseq [${1:elem} ${2:coll}]
		${0})
snippet fn
	(fn [${1}] ${0})
snippet if
	(if ${1:test-expr}
		${2:then-expr}
		${0:else-expr})
snippet if-let
	(if-let [${1:result} ${2:test-expr}]
		(${3:then-expr} $1)
		(${0:else-expr}))
snippet imp
	(:import [${1:package}])
		& {:keys [${1:keys}] :or {${0:defaults}}}
snippet let
	(let [${1:name} ${2:expr}]
		 ${0})
snippet letfn
	(letfn [(${1:name}) [${2:args}]
		${0})])
snippet map
	(map ${1:func} ${0:coll})
snippet mapl
	(map #(${1:lambda}) ${0:coll})
snippet met
	(${1:name} [${2:this} ${3:args}]
		${0})
snippet ns
	(ns ${0:name})
snippet dotimes
	(dotimes [_ 10]
		(time
			(dotimes [_ ${1:times}]
				${0})))
snippet pmethod
	(${1:name} [${2:this} ${0:args}])
snippet refer
	(:refer-clojure :exclude [${0}])
snippet require
	(:require [${1:namespace} :as [${0}]])
snippet use
	(:use [${1:namespace} :only [${0}]])
snippet print
	(println ${0})
snippet reduce
	(reduce ${1} ${2})
snippet when
	(when ${1:test} ${0:body})
snippet when-let
	(when-let [${1:result} ${2:test}]
		${0:body})
